From f9e6ddd2546ad83ca4f7655de644f8091deaa823 Mon Sep 17 00:00:00 2001
From: julian <julian@vibe.us>
Date: Mon, 20 Jul 2020 13:05:22 +0800
Subject: [PATCH 7/8] add touchscreen device

---
 kernel/drivers/usb/gadget/android.c           |  9 +++-
 .../drivers/usb/gadget/f_hid_android_touch.c  | 45 +++++++++++++++++++
 2 files changed, 53 insertions(+), 1 deletion(-)
 create mode 100644 kernel/drivers/usb/gadget/f_hid_android_touch.c

diff --git a/kernel/drivers/usb/gadget/android.c b/kernel/drivers/usb/gadget/android.c
index 816c0390fc..a286dd4608 100755
--- a/kernel/drivers/usb/gadget/android.c
+++ b/kernel/drivers/usb/gadget/android.c
@@ -40,6 +40,7 @@
 #include "f_hid.h"
 #include "f_hid_android_keyboard.c"
 #include "f_hid_android_mouse.c"
+#include "f_hid_android_touch.c"
 #endif
 #define USB_ETH_RNDIS y
 #include "f_rndis.c"
@@ -1017,7 +1018,7 @@ static struct android_usb_function midi_function = {
 #ifdef CONFIG_USB_FUNCTION_KJSD_HID
 static int hid_function_init(struct android_usb_function *f, struct usb_composite_dev *cdev)
 {
-	return ghid_setup(cdev->gadget, 2);
+	return ghid_setup(cdev->gadget, 3);
 }
 
 static void hid_function_cleanup(struct android_usb_function *f)
@@ -1040,6 +1041,12 @@ static int hid_function_bind_config(struct android_usb_function *f, struct usb_c
 		pr_info("%s: hid_function_bind_config mouse failed: %d\n", __func__, ret);
 		return ret;
 	}
+	printk(KERN_INFO "hid touchscreen\n");
+	ret = hidg_bind_config(c, &ghid_device_android_touch, 2);
+	if (ret) {
+		pr_info("%s: hid_function_bind_config touch failed: %d\n", __func__, ret);
+		return ret;
+	}
 	return 0;
 }
 
diff --git a/kernel/drivers/usb/gadget/f_hid_android_touch.c b/kernel/drivers/usb/gadget/f_hid_android_touch.c
new file mode 100644
index 0000000000..ce8b194661
--- /dev/null
+++ b/kernel/drivers/usb/gadget/f_hid_android_touch.c
@@ -0,0 +1,45 @@
+#ifdef CONFIG_USB_FUNCTION_KJSD_HID
+
+#include <linux/platform_device.h>
+#include <linux/usb/g_hid.h>
+
+/* HID descriptor for touchscreen */
+static struct hidg_func_descriptor ghid_device_android_touch = {
+	.subclass      = 1, /* Boot Interface Subclass */
+	.protocol      = 2, /* Mouse */
+	.report_length = 4,
+	.report_desc_length	= 52,
+	.report_desc = {
+		0x05, 0x00,  //Usage Page(Generic Desktop Controls)
+		0x09, 0x00,  //Usage (Mouse)
+		0xa1, 0x01,  //Collection (Application)
+		0x09, 0x01,  //Usage (pointer)
+		0xa1, 0x00,  //Collection (Physical)
+		0x05, 0x09,  //Usage Page (Button)
+		0x19, 0x01,  //Usage Minimum(1)
+		0x29, 0x05,  //Usage Maximum(5)
+		0x15, 0x00,  //Logical Minimum(1)
+		0x25, 0x01,  //Logical Maximum(1)
+		0x95, 0x05,  //Report Count(5)
+		0x75, 0x01,  //Report Size(1)
+		0x81, 0x02,  //Input(Data,Variable,Absolute,BitField)
+		0x95, 0x01,  //Report Count(1)
+		0x75, 0x03,  //Report Size(3)
+		0x81, 0x01,  //Input(Constant,Array,Absolute,BitField)
+		0x05, 0x01,  //Usage Page(Generic Desktop Controls)
+		0x09, 0x30,  //Usage(x)
+		0x09, 0x31,  //Usage(y)
+		//0x09, 0x38,  //Usage(Wheel)
+        0x15, 0x00, //     LOGICAL_MINIMUM (0)
+        0x26, 0x00, 0x10, //     LOGICAL_MAXIMUM (4096)
+        0x35, 0x00,    //Physical Minimum (0)
+        0x46, 0x00, 0x10, //Physical Maximum(4096)
+		0x75, 0x10,  //Report Size(16)
+		0x95, 0x02,  //Report Count(2)
+		0x81, 0x02,  //Input(Data,Variable,ABS)
+		0xc0,  //End Collection
+		0xc0  //End Collection
+	}
+};
+
+#endif
-- 
2.17.1

